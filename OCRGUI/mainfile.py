# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ocrgui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QMessageBox, QDialog
from setuptools import glob
import os
import subprocess
import logging

from constants import WINDOWS_CHECK_COMMAND, DEFAULT_CHECK_COMMAND, TESSERACT_DATA_PATH_VAR


def get_command():
    """
    Check OS and return command to identify if tesseract is installed or not
    :return:
    """
    if sys.platform.startswith('win'):
        return WINDOWS_CHECK_COMMAND
    return DEFAULT_CHECK_COMMAND


def check_pre_requisites_tesseract():
    """
    Check if the pre-requisites required for running the tesseract application are satisfied or not
    :param : NA
    :return: boolean
    """
    check_command = get_command()
    logging.debug("Running `{}` to check if tesseract is installed or not.".format(check_command))

    result = subprocess.run([check_command, 'tesseract'], stdout=subprocess.PIPE)
    if not result.stdout:
        logging.error("tesseract-ocr missing, install `tesseract` to resolve. Refer to README for more instructions.")
        return False
    logging.debug("Tesseract correctly installed!\n")

    if sys.platform.startswith('win'):
        environment_variables = os.environ
        logging.debug(
            "Checking if the Tesseract Data path is set correctly or not.\n")
        if TESSERACT_DATA_PATH_VAR in environment_variables:
            if environment_variables[TESSERACT_DATA_PATH_VAR]:
                path = environment_variables[TESSERACT_DATA_PATH_VAR]
                logging.debug("Checking if the path configured for Tesseract Data Environment variable `{}` \
                as `{}` is valid or not.".format(TESSERACT_DATA_PATH_VAR, path))
                if os.path.isdir(path) and os.access(path, os.R_OK):
                    logging.debug("All set to go!")
                    return True
                else:
                    logging.error(
                        "Configured path for Tesseract data is not accessible!")
                    return False
            else:
                logging.error("Tesseract Data path Environment variable '{}' configured to an empty string!\
                ".format(TESSERACT_DATA_PATH_VAR))
                return False
        else:
            logging.error("Tesseract Data path Environment variable '{}' needs to be configured to point to\
            the tessdata!".format(TESSERACT_DATA_PATH_VAR))
            return False
    else:
        return True


class Ui_MainWindow(object):
    def __init__(self):
        self.central_widget = QtWidgets.QWidget(MainWindow)
        self.frame = QtWidgets.QFrame(self.central_widget)
        self.image_view = QtWidgets.QLabel(self.central_widget)
        self.convert = QtWidgets.QPushButton(self.central_widget)
        self.browse = QtWidgets.QPushButton(self.frame)
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.label = QtWidgets.QLabel(self.frame)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)

        self.textEdit = QtWidgets.QTextEdit(self.central_widget)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1118, 485)
        self.central_widget.setObjectName("centralwidget")
        self.textEdit.setGeometry(QtCore.QRect(10, 110, 701, 351))
        self.textEdit.setObjectName("textEdit")
        self.frame.setGeometry(QtCore.QRect(19, 20, 581, 45))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.browse.setObjectName("browse")
        self.horizontalLayout.addWidget(self.browse)
        self.browse.clicked.connect(self.open_file)
        self.convert.setGeometry(QtCore.QRect(620, 30, 89, 25))
        self.convert.setObjectName("convert")
        self.convert.clicked.connect(self.convert_to_text)
        self.image_view.setGeometry(QtCore.QRect(740, 110, 331, 341))
        self.image_view.setObjectName("image_view")
        pixmap = QPixmap('logo.png')
        pixmap = pixmap.scaled(self.image_view.width(), self.image_view.height())
        self.image_view.setPixmap(pixmap)
        MainWindow.setCentralWidget(self.central_widget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def onQApplicationStarted(self):
        # QMessageBox.about(None,"Message","Application started ")
        pixmap = QPixmap('logo.png')
        pixmap = pixmap.scaled(self.image_view.width(), self.image_view.height())
        self.image_view.setPixmap(pixmap)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "File Name"))
        self.browse.setText(_translate("MainWindow", "Browse"))
        self.convert.setText(_translate("MainWindow", "Convert"))
        self.image_view.setText(_translate("MainWindow", "show image here"))
        self.onQApplicationStarted()
    def open_file(self):
        # self.file_name = QtWidgets.QFileDialog.getOpenFileName(None, "Open", "", "Images Files (*.jpg)")
        # if self.file_name[0] != '':
        #     self.lineEdit.setText(self.file_name[0])
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(
            None,
            "Select your image",
            "",
            "All Files (*);;Image Files (*.jpeg)",
            options=options)
        if fileName:
            self.lineEdit.setText(fileName)
            pixmap = QPixmap(fileName)
            pixmap = pixmap.scaled(self.image_view.width(), self.image_view.height())
            self.image_view.setPixmap(pixmap)

    def convert_to_text(self):

        if sys.version_info[0] < 3:
            QMessageBox.about(None, "python version Error", "Please install python 3.x ")
        check_pre_requisites_tesseract()
        path = self.lineEdit.text().split(sep='/')
        image = path[len(path) - 1]
        filename_without_extension = os.path.splitext(image)[0]
        output_file = 'output/{0}'.format(filename_without_extension)
        subprocess.run(['tesseract', self.lineEdit.text(), output_file],
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
        f = open(output_file+".txt", "r")
        text = f.read()
        self.textEdit.setText(text)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
